# version: '3'
services:
  nginx:
    image: nginx
    hostname: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/cert:/etc/nginx/cert
      - ./nginx/log/:/var/log/nginx/
      - /var/www/html:/var/www/html
    working_dir: /etc/nginx/conf.d
    environment:
      TZ: 'Asia/Shanghai'
    restart: always
    networks:
      - backend
      - frontend

  node:
    image: node
    hostname: node
    container_name: node
    volumes:
      - /var/www/html:/var/www/html
    restart: always
    command: tail -f
    working_dir: /var/www/html
    environment:
      TZ: 'Asia/Shanghai'
    networks:
      - frontend

  php73:
    hostname: php73
    build: ./php73
    container_name: php73
    ports:
      - "9000:9000"
    volumes:
      - /var/www/html:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./php/php-fpm.conf:/usr/local/php/etc/php-fpm.conf
      - ./php/www.conf:/usr/local/php/etc/php-fpm.d/www.conf
      - ./php/log/:/usr/local/php/var/log/
    working_dir: /var/www/html
    restart: always
    environment:
      TZ: 'Asia/Shanghai'
    networks:
      - backend
  
  php8:
    build: ./php8
    container_name: php8
    hostname: php8
    expose:
      - "9000"
    volumes:
      - /var/www/html:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./php/php-fpm.conf:/usr/local/php/etc/php-fpm.conf
      - ./php/www.conf:/usr/local/php/etc/php-fpm.d/www.conf
      - ./php/log/:/usr/local/php/var/log/
    working_dir: /var/www/html
    restart: always
    environment:
      TZ: 'Asia/Shanghai'
    networks:
      - backend

  php74:
    build: ./php74
    container_name: php74
    hostname: php74
    expose:
      - "9000"
    volumes:
      - /var/www/html:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./php/php-fpm.conf:/usr/local/php/etc/php-fpm.conf
      - ./php/www.conf:/usr/local/php/etc/php-fpm.d/www.conf
      - ./php/log/:/usr/local/php/var/log/
    working_dir: /var/www/html
    restart: always
    environment:
      TZ: 'Asia/Shanghai'
    networks:
      - backend

  mysql:
    image: mysql:8.0
    hostname: mysql
    container_name: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/my.cnf
    # command: --default-authentication-plugin=mysql_native_password
    environment:
      TZ: 'Asia/Shanghai'
      MYSQL_ROOT_PASSWORD: 123456
    restart: always
    networks:
      - backend

  pgsql:
    image: postgres
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    entrypoint:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
    volumes:
      - ./mysql/data:/var/lib/postgresql
    restart: always
    networks:
      - backend

  redis:
    image: redis
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/redis.log:/usr/local/redis/redis.log    
      - ./redis/conf:/usr/local/etc/redis
    environment:
      TZ: 'Asia/Shanghai'
    # command: >
    #      --requirepass
    restart: always
    networks:
      - backend

  memcached:
    hostname: memcached
    container_name: memcached
    image: memcached
    expose:
      - "11211"
    restart: always
    networks:
      - backend

  rabbitmq1:
    hostname: rabbitmq1
    container_name: rabbitmq1
    image: rabbitmq:3.8-management
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 2G
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    environment:      
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 123456
      TZ: 'Asia/Shanghai'
      RABBITMQ_ERLANG_COOKIE: 'rabbitmqCookie'
    restart: always
    networks:
      - backend

  rabbitmq2:
    hostname: rabbitmq2
    container_name: rabbitmq2
    image: rabbitmq:3.8-management
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 2G
    ports:
      - "5673:5672"
    volumes:
      - ./rabbitmq/data2:/var/lib/rabbitmq
    environment:
      TZ: 'Asia/Shanghai'
      RABBITMQ_ERLANG_COOKIE: 'rabbitmqCookie'
    restart: always
    networks:
      - backend

  rabbitmq3:
    hostname: rabbitmq3
    container_name: rabbitmq3
    image: rabbitmq:3.8-management
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 2G
    ports:
      - "5674:5672"
    volumes:
      - ./rabbitmq/data3:/var/lib/rabbitmq
    environment:
      TZ: 'Asia/Shanghai'
      RABBITMQ_ERLANG_COOKIE: 'rabbitmqCookie'
    restart: always
    networks:
      - backend

  golang:
    hostname: golang
    container_name: golang
    build:
      context: ./golang
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "9300:9300"
    depends_on:
      - memcached
      - redis
      - mysql
      - nginx
    volumes:
      - /var/www/src:/go/src
    deploy:
      resources:
        limits:
          cpus: "0.70"
          memory: 2G
    working_dir: /go/src
    restart: always
    environment:
      TZ: 'Asia/Shanghai'
    networks:
      - frontend

  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      TZ: 'Asia/Shanghai'
    restart: always
    networks:
      - backend
      - frontend

  kafka:
    image: bitnami/kafka
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: always
    environment:
      TZ: 'Asia/Shanghai'
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
      - frontend

networks:
  frontend:
  backend:



